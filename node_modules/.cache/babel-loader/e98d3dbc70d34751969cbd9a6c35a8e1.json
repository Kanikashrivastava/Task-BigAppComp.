{"ast":null,"code":"// import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n// import TextField from '@material-ui/core/TextField';\n// let counter = 0;\n// function createData(name, calories, fat, carbs, protein) {\n//   counter += 1;\n//   return { id: counter, name, calories, fat, carbs, protein };\n// }\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n// const rows = [\n//   { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n//   { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n//   { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n//   { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n//   { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n// ];\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             <Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//           </TableCell>\n//           {rows.map(\n//             row => (\n//               <TableCell\n//                 key={row.id}\n//                 align={row.numeric ? 'right' : 'left'}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             ),\n//             this,\n//           )}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <TextField\n//                 label=\"Search...\"\n//                 className={classes.textField}\n//                 type=\"text\"\n//                 name=\"search\"\n//                 margin=\"normal\"\n//                 variant=\"outlined\"\n//                 />\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     data: [\n//       createData('Cupcake', 305, 3.7, 67, 4.3),\n//       createData('Donut', 452, 25.0, 51, 4.9),\n//       createData('Eclair', 262, 16.0, 24, 6.0),\n//       createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n//       createData('Gingerbread', 356, 16.0, 49, 3.9),\n//     ],\n//     page: 0,\n//     rowsPerPage: 5,\n//   };\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(state => ({ selected: state.data.map(n => n.id) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     this.setState({ selected: newSelected });\n//   };\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n//   render() {\n//     const { classes } = this.props;\n//     const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               rowCount={data.length}\n//             />\n//             <TableBody>\n//               {stableSort(data, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map(n => {\n//                   const isSelected = this.isSelected(n.id);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, n.id)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={n.id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {n.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{n.calories}</TableCell>\n//                       <TableCell align=\"right\">{n.fat}</TableCell>\n//                       <TableCell align=\"right\">{n.carbs}</TableCell>\n//                       <TableCell align=\"right\">{n.protein}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={data.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n// export default withStyles(styles)(EnhancedTable);","map":{"version":3,"sources":["C:\\Users\\sonalika\\Desktop\\gitHubData\\src\\components\\table.js"],"names":[],"mappingssourcesContent":["// import React from 'react';\r\n// import classNames from 'classnames';\r\n// import PropTypes from 'prop-types';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import Table from '@material-ui/core/Table';\r\n// import TableBody from '@material-ui/core/TableBody';\r\n// import TableCell from '@material-ui/core/TableCell';\r\n// import TableHead from '@material-ui/core/TableHead';\r\n// import TablePagination from '@material-ui/core/TablePagination';\r\n// import TableRow from '@material-ui/core/TableRow';\r\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\r\n// import Toolbar from '@material-ui/core/Toolbar';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import Paper from '@material-ui/core/Paper';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import Tooltip from '@material-ui/core/Tooltip';\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\r\n// import TextField from '@material-ui/core/TextField';\r\n\r\n\r\n// let counter = 0;\r\n// function createData(name, calories, fat, carbs, protein) {\r\n//   counter += 1;\r\n//   return { id: counter, name, calories, fat, carbs, protein };\r\n// }\r\n\r\n// function desc(a, b, orderBy) {\r\n//   if (b[orderBy] < a[orderBy]) {\r\n//     return -1;\r\n//   }\r\n//   if (b[orderBy] > a[orderBy]) {\r\n//     return 1;\r\n//   }\r\n//   return 0;\r\n// }\r\n\r\n// function stableSort(array, cmp) {\r\n//   const stabilizedThis = array.map((el, index) => [el, index]);\r\n//   stabilizedThis.sort((a, b) => {\r\n//     const order = cmp(a[0], b[0]);\r\n//     if (order !== 0) return order;\r\n//     return a[1] - b[1];\r\n//   });\r\n//   return stabilizedThis.map(el => el[0]);\r\n// }\r\n\r\n// function getSorting(order, orderBy) {\r\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\r\n// }\r\n\r\n// const rows = [\r\n//   { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\r\n//   { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\r\n//   { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\r\n//   { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\r\n//   { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\r\n// ];\r\n\r\n// class EnhancedTableHead extends React.Component {\r\n//   createSortHandler = property => event => {\r\n//     this.props.onRequestSort(event, property);\r\n//   };\r\n\r\n//   render() {\r\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\r\n\r\n//     return (\r\n//       <TableHead>\r\n//         <TableRow>\r\n//           <TableCell padding=\"checkbox\">\r\n//             <Checkbox\r\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\r\n//               checked={numSelected === rowCount}\r\n//               onChange={onSelectAllClick}\r\n//             />\r\n//           </TableCell>\r\n//           {rows.map(\r\n//             row => (\r\n//               <TableCell\r\n//                 key={row.id}\r\n//                 align={row.numeric ? 'right' : 'left'}\r\n//                 padding={row.disablePadding ? 'none' : 'default'}\r\n//                 sortDirection={orderBy === row.id ? order : false}\r\n//               >\r\n//                 <Tooltip\r\n//                   title=\"Sort\"\r\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\r\n//                   enterDelay={300}\r\n//                 >\r\n//                   <TableSortLabel\r\n//                     active={orderBy === row.id}\r\n//                     direction={order}\r\n//                     onClick={this.createSortHandler(row.id)}\r\n//                   >\r\n//                     {row.label}\r\n//                   </TableSortLabel>\r\n//                 </Tooltip>\r\n//               </TableCell>\r\n//             ),\r\n//             this,\r\n//           )}\r\n//         </TableRow>\r\n//       </TableHead>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// EnhancedTableHead.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n//   onRequestSort: PropTypes.func.isRequired,\r\n//   onSelectAllClick: PropTypes.func.isRequired,\r\n//   order: PropTypes.string.isRequired,\r\n//   orderBy: PropTypes.string.isRequired,\r\n//   rowCount: PropTypes.number.isRequired,\r\n// };\r\n\r\n// const toolbarStyles = theme => ({\r\n//   root: {\r\n//     paddingRight: theme.spacing.unit,\r\n//   },\r\n//   highlight:\r\n//     theme.palette.type === 'light'\r\n//       ? {\r\n//           color: theme.palette.secondary.main,\r\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n//         }\r\n//       : {\r\n//           color: theme.palette.text.primary,\r\n//           backgroundColor: theme.palette.secondary.dark,\r\n//         },\r\n//   spacer: {\r\n//     flex: '1 1 100%',\r\n//   },\r\n//   actions: {\r\n//     color: theme.palette.text.secondary,\r\n//   },\r\n//   title: {\r\n//     flex: '0 0 auto',\r\n//   },\r\n// });\r\n\r\n// let EnhancedTableToolbar = props => {\r\n//   const { numSelected, classes } = props;\r\n\r\n//   return (\r\n//     <Toolbar\r\n//       className={classNames(classes.root, {\r\n//         [classes.highlight]: numSelected > 0,\r\n//       })}\r\n//     >\r\n//       <div className={classes.title}>\r\n//         {numSelected > 0 ? (\r\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\r\n//             {numSelected} selected\r\n//           </Typography>\r\n//         ) : (\r\n//           <Typography variant=\"h6\" id=\"tableTitle\">\r\n//             Nutrition\r\n//           </Typography>\r\n//         )}\r\n//       </div>\r\n//       <div className={classes.spacer} />\r\n//       <div className={classes.actions}>\r\n//         {numSelected > 0 ? (\r\n//           <Tooltip title=\"Delete\">\r\n//             <IconButton aria-label=\"Delete\">\r\n//               <DeleteIcon />\r\n//             </IconButton>\r\n//           </Tooltip>\r\n//         ) : (\r\n//           <Tooltip title=\"Filter list\">\r\n//             <TextField\r\n//                 label=\"Search...\"\r\n//                 className={classes.textField}\r\n//                 type=\"text\"\r\n//                 name=\"search\"\r\n//                 margin=\"normal\"\r\n//                 variant=\"outlined\"\r\n//                 />\r\n//           </Tooltip>\r\n//         )}\r\n//       </div>\r\n//     </Toolbar>\r\n//   );\r\n// };\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   classes: PropTypes.object.isRequired,\r\n//   numSelected: PropTypes.number.isRequired,\r\n// };\r\n\r\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\r\n\r\n// const styles = theme => ({\r\n//   root: {\r\n//     width: '100%',\r\n//     marginTop: theme.spacing.unit * 3,\r\n//   },\r\n//   table: {\r\n//     minWidth: 1020,\r\n//   },\r\n//   tableWrapper: {\r\n//     overflowX: 'auto',\r\n//   },\r\n// });\r\n\r\n// class EnhancedTable extends React.Component {\r\n//   state = {\r\n//     order: 'asc',\r\n//     orderBy: 'calories',\r\n//     selected: [],\r\n//     data: [\r\n//       createData('Cupcake', 305, 3.7, 67, 4.3),\r\n//       createData('Donut', 452, 25.0, 51, 4.9),\r\n//       createData('Eclair', 262, 16.0, 24, 6.0),\r\n//       createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n//       createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//     ],\r\n//     page: 0,\r\n//     rowsPerPage: 5,\r\n//   };\r\n\r\n\r\n//   handleSelectAllClick = event => {\r\n//     if (event.target.checked) {\r\n//       this.setState(state => ({ selected: state.data.map(n => n.id) }));\r\n//       return;\r\n//     }\r\n//     this.setState({ selected: [] });\r\n//   };\r\n\r\n//   handleClick = (event, id) => {\r\n//     const { selected } = this.state;\r\n//     const selectedIndex = selected.indexOf(id);\r\n//     let newSelected = [];\r\n\r\n//     if (selectedIndex === -1) {\r\n//       newSelected = newSelected.concat(selected, id);\r\n//     } else if (selectedIndex === 0) {\r\n//       newSelected = newSelected.concat(selected.slice(1));\r\n//     } else if (selectedIndex === selected.length - 1) {\r\n//       newSelected = newSelected.concat(selected.slice(0, -1));\r\n//     } else if (selectedIndex > 0) {\r\n//       newSelected = newSelected.concat(\r\n//         selected.slice(0, selectedIndex),\r\n//         selected.slice(selectedIndex + 1),\r\n//       );\r\n//     }\r\n\r\n//     this.setState({ selected: newSelected });\r\n//   };\r\n\r\n//   handleChangePage = (event, page) => {\r\n//     this.setState({ page });\r\n//   };\r\n\r\n//   handleChangeRowsPerPage = event => {\r\n//     this.setState({ rowsPerPage: event.target.value });\r\n//   };\r\n\r\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\r\n\r\n//   render() {\r\n//     const { classes } = this.props;\r\n//     const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\r\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\r\n\r\n//     return (\r\n//       <Paper className={classes.root}>\r\n//         <EnhancedTableToolbar numSelected={selected.length} />\r\n//         <div className={classes.tableWrapper}>\r\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\r\n//             <EnhancedTableHead\r\n//               numSelected={selected.length}\r\n//               order={order}\r\n//               orderBy={orderBy}\r\n//               onSelectAllClick={this.handleSelectAllClick}\r\n//               rowCount={data.length}\r\n//             />\r\n//             <TableBody>\r\n//               {stableSort(data, getSorting(order, orderBy))\r\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n//                 .map(n => {\r\n//                   const isSelected = this.isSelected(n.id);\r\n//                   return (\r\n//                     <TableRow\r\n//                       hover\r\n//                       onClick={event => this.handleClick(event, n.id)}\r\n//                       role=\"checkbox\"\r\n//                       aria-checked={isSelected}\r\n//                       tabIndex={-1}\r\n//                       key={n.id}\r\n//                       selected={isSelected}\r\n//                     >\r\n//                       <TableCell padding=\"checkbox\">\r\n//                         <Checkbox checked={isSelected} />\r\n//                       </TableCell>\r\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n//                         {n.name}\r\n//                       </TableCell>\r\n//                       <TableCell align=\"right\">{n.calories}</TableCell>\r\n//                       <TableCell align=\"right\">{n.fat}</TableCell>\r\n//                       <TableCell align=\"right\">{n.carbs}</TableCell>\r\n//                       <TableCell align=\"right\">{n.protein}</TableCell>\r\n//                     </TableRow>\r\n//                   );\r\n//                 })}\r\n//               {emptyRows > 0 && (\r\n//                 <TableRow style={{ height: 49 * emptyRows }}>\r\n//                   <TableCell colSpan={6} />\r\n//                 </TableRow>\r\n//               )}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </div>\r\n//         <TablePagination\r\n//           rowsPerPageOptions={[5, 10, 25]}\r\n//           component=\"div\"\r\n//           count={data.length}\r\n//           rowsPerPage={rowsPerPage}\r\n//           page={page}\r\n//           backIconButtonProps={{\r\n//             'aria-label': 'Previous Page',\r\n//           }}\r\n//           nextIconButtonProps={{\r\n//             'aria-label': 'Next Page',\r\n//           }}\r\n//           onChangePage={this.handleChangePage}\r\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n//         />\r\n//       </Paper>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// EnhancedTable.propTypes = {\r\n//   classes: PropTypes.object.isRequired,\r\n// };\r\n\r\n// export default withStyles(styles)(EnhancedTable);\r\n"]},"metadata":{},"sourceType":"module"}